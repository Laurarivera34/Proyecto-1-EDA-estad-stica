hog_single <- hog_min %>%
left_join(per_hh, by = "id_hogar") %>%
mutate(
via_A = respondent_is_head & has_hijo & !has_conyuge,
via_B = !respondent_is_head & papa_mama_single,
single_parent_relaxed = as.integer(via_A | via_B)
)
# 5. Resumen por región
resumen_single <- bind_rows(
hog_single %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
group_by(region) %>%
summarise(
hogares = n(),
n_single_parent = sum(single_parent_relaxed == 1, na.rm = TRUE),
pct_single_parent = round(mean(coalesce(as.integer(single_parent_relaxed), 0L) == 1) * 100, 2),
.groups = "drop"
),
hog_single %>%
summarise(
region = "Total país",
hogares = n(),
n_single_parent = sum(single_parent_relaxed == 1, na.rm = TRUE),
pct_single_parent = round(mean(coalesce(as.integer(single_parent_relaxed), 0L) == 1) * 100, 2)
)
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# 6. Crear tabla HTML con formato “aer”
tabla2 <- resumen_single %>%
kable(
format = "html",
caption = "Hogares monoparentales por región",
digits = 2,
col.names = c("Región", "Hogares", "Hogares monoparentales", "%")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# 7. Guardar tabla
save_kable(tabla2, "results/tabla2.html")
# 1) Identificando personas con discapacidad
personas_disc <- personas %>%
mutate(
has_disability_person = as.integer(
(salud12_barreras_salud_fisica == TRUE) |
(miembros27_barre_discp == 1)
)
) %>%
select(id_hogar, id_persona, salud12_barreras_salud_fisica,
miembros27_barre_discp, has_disability_person)
# 2) Agregado a nivel hogar
hog_disc <- personas_disc %>%
group_by(id_hogar) %>%
summarise(
household_has_disability = as.integer(any(has_disability_person == 1, na.rm = TRUE)),
.groups = "drop"
)
# 3) Unir con hogares y agregar región
hogares_disability <- data_hogares %>%
left_join(hog_disc, by = "id_hogar")
# 4) Resumen por región
resumen_disability <- bind_rows(
hogares_disability %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
group_by(region) %>%
summarise(
hogares = n(),
n_hh_con_discapacidad = sum(household_has_disability == 1, na.rm = TRUE),
pct_hh_con_discapacidad = round(mean(replace(household_has_disability, is.na(household_has_disability), 0) == 1) * 100, 2),
.groups = "drop"
),
hogares_disability %>%
summarise(
region = "Total país",
hogares = n(),
n_hh_con_discapacidad = sum(household_has_disability == 1, na.rm = TRUE),
pct_hh_con_discapacidad = round(mean(replace(household_has_disability, is.na(household_has_disability), 0) == 1) * 100, 2)
)
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# 5) Crear tabla HTML con formato “aer”
tabla3 <- resumen_disability %>%
kable(
format = "html",
caption = "Hogares con alguna persona con discapacidad por región",
digits = 2,
col.names = c("Región", "Hogares", "Hogares con discapacidad", "%")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# 6) Guardar tabla como HTML
save_kable(tabla3, "results/tabla3.html")
# 1) Identificando hogares con violencia para alguno de sus miembros
hogares_violencia_amenazas <- data_hogares %>%
mutate(
household_survivor_violence = if_else(
proteccion1006_v_ctima_de_violencia_amenazas == 1, 1L, 0L, missing = 0L
)
)
# 2) Resumen por región
resumen_violencia_amenazas <- bind_rows(
hogares_violencia_amenazas %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
group_by(region) %>%
summarise(
hogares = n(),
n_hh_con_violencia = sum(household_survivor_violence == 1, na.rm = TRUE),
pct_hh_con_violencia = round(mean(household_survivor_violence == 1, na.rm = TRUE) * 100, 2),
.groups = "drop"
),
hogares_violencia_amenazas %>%
summarise(
region = "Total país",
hogares = n(),
n_hh_con_violencia = sum(household_survivor_violence == 1, na.rm = TRUE),
pct_hh_con_violencia = round(mean(household_survivor_violence == 1, na.rm = TRUE) * 100, 2)
)
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# 3) Crear tabla HTML con formato “aer”
tabla4 <- resumen_violencia_amenazas %>%
kable(
format = "html",
caption = "Hogares con algún miembro víctima de violencia o amenazas por región",
digits = 2,
col.names = c("Región", "Hogares", "Hogares con violencia", "% Hogares con violencia")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# 4) Guardar tabla como HTML
save_kable(tabla4, "results/tabla4.html")
# 1) Construcción del score de vulnerabilidad
hogares_vulnerabilidad <- hogares_out %>%
select(id_hogar, mpio, head_female, f_exp_hog) %>%
left_join(hog_single %>% select(id_hogar, single_parent_relaxed), by = "id_hogar") %>%
left_join(hogares_disability %>% select(id_hogar, household_has_disability), by = "id_hogar") %>%
left_join(hogares_violencia_amenazas %>% select(id_hogar, household_survivor_violence), by = "id_hogar") %>%
mutate(
head_female                  = coalesce(as.integer(head_female), 0L),
single_parent_relaxed        = coalesce(as.integer(single_parent_relaxed), 0L),
household_has_disability     = coalesce(as.integer(household_has_disability), 0L),
household_survivor_violence = coalesce(as.integer(household_survivor_violence), 0L),
vulnerability_score = head_female +
single_parent_relaxed +
household_has_disability +
household_survivor_violence
)
# 2a) Tabla “larga”: conteos y porcentajes por score y región
resumen_score <- bind_rows(
hogares_vulnerabilidad %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
count(region, vulnerability_score, name = "n") %>%
group_by(region) %>% mutate(pct = round(100 * n / sum(n), 2)) %>% ungroup(),
hogares_vulnerabilidad %>%
count(vulnerability_score, name = "n") %>%
mutate(region = "Total país") %>%
group_by(region) %>% mutate(pct = round(100 * n / sum(n), 2)) %>% ungroup()
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")),
vulnerability_score)
# Tabla larga HTML
tabla5 <- resumen_score %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por score y región (tabla larga)",
digits = 2,
col.names = c("Región", "Score de vulnerabilidad", "N", "%")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla larga
save_kable(tabla5, "results/tabla5.html")
# 2b) Tabla “ancha”: porcentajes por columnas 0–4
tabla_score_pct <- resumen_score %>%
select(region, vulnerability_score, pct) %>%
pivot_wider(names_from = vulnerability_score, values_from = pct, values_fill = 0) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# Tabla ancha HTML
tabla6 <- tabla_score_pct %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por región (tabla ancha, %)",
digits = 2
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla ancha
save_kable(tabla6, "results/tabla6.html")
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE DEPENDIENTE
cartagena_dep <- cartagena_pre %>%
dplyr::select(id_hogar,
servicios,
alojamiento4_alojamiento4_energia,
alojamiento4_alojamiento4_gas,
alojamiento4_alojamiento4_alcantarillado,
alojamiento4_alojamiento4_acueducto,
alojamiento4_alojamiento4_recoleccion)
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE INDEPENDIENTE
cartagena_ind <- hogares_vulnerabilidad %>%
filter(mpio=="Cartagena De Indias") %>%
dplyr::select(id_hogar,
head_female,
single_parent_relaxed,
household_has_disability,
household_survivor_violence,
vulnerability_score,
f_exp_hog)
# OTRAS VARIABLES
# se deja abierta por si es requerido
# Uniendo las bases de datos
cartagena <- left_join(cartagena_dep, cartagena_ind, by = "id_hogar")
# 1. Tipo de variable (estructura)
estructura <- data.frame(estructura = capture.output(str(cartagena$servicios)))
estructura_html <- estructura %>%
kable("html", caption = "Estructura de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(estructura_html, "results/estructura_servicios.html")
# 2. Distribución (frecuencias sin ponderar)
tabla_simple <- as.data.frame(table(cartagena$servicios, useNA = "ifany"))
colnames(tabla_simple) <- c("Valor", "Frecuencia")
tabla_simple_html <- tabla_simple %>%
kable("html", caption = "Distribución de frecuencias (sin ponderar)") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla_simple_html, "results/frecuencias_servicios.html")
# 3. Proporciones (sin ponderar)
prop_simple <- round(prop.table(table(cartagena$servicios, useNA = "ifany")) * 100, 1)
prop_simple <- data.frame(Valor = names(prop_simple), Proporcion = as.vector(prop_simple))
prop_simple_html <- prop_simple %>%
kable("html", caption = "Proporciones (%) de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(prop_simple_html, "results/proporciones_servicios.html")
# 4. Datos faltantes (NA)
num_na <- data.frame(
NA_count = sum(is.na(cartagena$servicios)),
NA_pct   = round(mean(is.na(cartagena$servicios)) * 100, 2)
)
num_na_html <- num_na %>%
kable("html", caption = "Valores faltantes (NA)") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(num_na_html, "results/na_servicios.html")
# 5. Valores únicos
valores_unicos <- data.frame(Valores_unicos = sort(unique(cartagena$servicios)))
valores_unicos_html <- valores_unicos %>%
kable("html", caption = "Valores únicos observados") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(valores_unicos_html, "results/unicos_servicios.html")
# 6. Tabla resumen con porcentaje y etiquetas
tabla_resumen <- cartagena %>%
count(servicios) %>%
mutate(
n = as.numeric(n),
porc = round(100 * n / sum(n), 1),
servicios_label = case_when(
servicios == 0 ~ "Sin carencias",
servicios == 1 ~ "1 carencia",
servicios == 2 ~ "2 carencias",
servicios == 3 ~ "3 carencias",
servicios == 4 ~ "4 carencias",
servicios == 5 ~ "5 carencias",
TRUE ~ "No sabe/NA"
)
)
tabla_resumen_html <- tabla_resumen %>%
select(servicios_label, n, porc) %>%
kable("html", caption = "Distribución de carencias de acceso a servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla_resumen_html, "results/tabla_resumen_servicios.html")
# 7. Gráfico
grafico4 <- ggplot(tabla_resumen, aes(x = servicios_label, y = porc)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_text(aes(label = paste0(porc, "%")), vjust = -0.4, size = 3.5, color = "black") +
labs(
title = "Carencia de acceso a servicios públicos",
subtitle = "Distribución de hogares según número de carencias",
x = "Número de carencias reportadas",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
print(grafico4)
ggsave("results/grafico4.png",
plot = grafico4, width = 10, height = 6, dpi = 300)
# 8. Notas de método
notas_metodo <- "
Notas de método:
- Se estandarizaron las etiquetas y las categorías con valores entre 0 y 5.
- No se encontraron valores fuera del rango 0–5.
- Las barras de error no se aplican porque la variable es discreta.
- Los valores NA se reportan explícitamente y no fueron imputados.
- Las categorías con frecuencia menor al 3% se mantuvieron dado su significado sustantivo.
"
writeLines(notas_metodo, "results/notas_metodo_servicios.txt")
# 1. Tipo de variable (estructura)
estructura <- data.frame(estructura = capture.output(str(cartagena$servicios)))
tabla7 <- estructura %>%
kable("html", caption = "Estructura de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla7, "results/tabla7.html")
# 2. Tablas sin y con ponderación
# Sin ponderar
tabla_simple_serv <- cartagena %>%
count(servicios) %>%
mutate(
n_sinpond = as.numeric(n),
porc_sinpond = round(100 * n / sum(n), 1)
) %>%
select(servicios, n_sinpond, porc_sinpond)
# Ponderada (con factor de expansión)
tabla_pond_serv <- cartagena %>%
group_by(servicios) %>%
summarise(n_pond = sum(f_exp_hog, na.rm = TRUE), .groups = "drop") %>%
mutate(porc_pond = round(100 * n_pond / sum(n_pond), 1))
# Unir tablas lado a lado
tabla8 <- tabla_simple_serv %>%
full_join(tabla_pond_serv, by = "servicios") %>%
mutate(
servicios_label = case_when(
servicios == 0 ~ "Sin carencias",
servicios == 1 ~ "1 carencia",
servicios == 2 ~ "2 carencias",
servicios == 3 ~ "3 carencias",
servicios == 4 ~ "4 carencias",
servicios == 5 ~ "5 carencias",
TRUE ~ "No sabe/NA"
)
) %>%
select(servicios_label, n_sinpond, porc_sinpond, n_pond, porc_pond)
# 3. Guardar
tabla8 <- tabla_comp_serv %>%
kable(
"html",
caption = "Distribución de carencias en servicios públicos: comparación ponderada vs sin ponderar",
col.names = c(
"Categoría",
"N (sin ponderar)", "% (sin ponderar)",
"N (ponderado)", "% (ponderado)"
),
digits = 1
) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed")
) %>%
add_header_above(c(" " = 1, "Sin ponderar" = 2, "Ponderado" = 2))
# 1. Tipo de variable (estructura)
estructura <- data.frame(estructura = capture.output(str(cartagena$servicios)))
estructura_html <- estructura %>%
kable("html", caption = "Estructura de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(estructura_html, "results/estructura_servicios.html")
# 2. Distribución (frecuencias sin ponderar)
tabla_simple <- as.data.frame(table(cartagena$servicios, useNA = "ifany"))
colnames(tabla_simple) <- c("Valor", "Frecuencia")
tabla_simple_html <- tabla_simple %>%
kable("html", caption = "Distribución de frecuencias (sin ponderar)") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla_simple_html, "results/frecuencias_servicios.html")
# 3. Proporciones (sin ponderar)
prop_simple <- round(prop.table(table(cartagena$servicios, useNA = "ifany")) * 100, 1)
prop_simple <- data.frame(Valor = names(prop_simple), Proporcion = as.vector(prop_simple))
prop_simple_html <- prop_simple %>%
kable("html", caption = "Proporciones (%) de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(prop_simple_html, "results/proporciones_servicios.html")
# 4. Datos faltantes (NA)
num_na <- data.frame(
NA_count = sum(is.na(cartagena$servicios)),
NA_pct   = round(mean(is.na(cartagena$servicios)) * 100, 2)
)
num_na_html <- num_na %>%
kable("html", caption = "Valores faltantes (NA)") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(num_na_html, "results/na_servicios.html")
# 5. Valores únicos
valores_unicos <- data.frame(Valores_unicos = sort(unique(cartagena$servicios)))
valores_unicos_html <- valores_unicos %>%
kable("html", caption = "Valores únicos observados") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(valores_unicos_html, "results/unicos_servicios.html")
# 6. Tabla resumen con porcentaje y etiquetas
tabla_resumen <- cartagena %>%
count(servicios) %>%
mutate(
n = as.numeric(n),
porc = round(100 * n / sum(n), 1),
servicios_label = case_when(
servicios == 0 ~ "Sin carencias",
servicios == 1 ~ "1 carencia",
servicios == 2 ~ "2 carencias",
servicios == 3 ~ "3 carencias",
servicios == 4 ~ "4 carencias",
servicios == 5 ~ "5 carencias",
TRUE ~ "No sabe/NA"
)
)
tabla_resumen_html <- tabla_resumen %>%
select(servicios_label, n, porc) %>%
kable("html", caption = "Distribución de carencias de acceso a servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla_resumen_html, "results/tabla_resumen_servicios.html")
# 7. Gráfico
grafico4 <- ggplot(tabla_resumen, aes(x = servicios_label, y = porc)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_text(aes(label = paste0(porc, "%")), vjust = -0.4, size = 3.5, color = "black") +
labs(
title = "Carencia de acceso a servicios públicos",
subtitle = "Distribución de hogares según número de carencias",
x = "Número de carencias reportadas",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
print(grafico4)
ggsave("results/grafico4.png",
plot = grafico4, width = 10, height = 6, dpi = 300)
# 8. Notas de método
notas_metodo <- "
Notas de método:
- Se estandarizaron las etiquetas y las categorías con valores entre 0 y 5.
- No se encontraron valores fuera del rango 0–5.
- Las barras de error no se aplican porque la variable es discreta.
- Los valores NA se reportan explícitamente y no fueron imputados.
- Las categorías con frecuencia menor al 3% se mantuvieron dado su significado sustantivo.
"
writeLines(notas_metodo, "results/notas_metodo_servicios.txt")
# 1. Tipo de variable (estructura)
estructura <- data.frame(estructura = capture.output(str(cartagena$servicios)))
tabla7 <- estructura %>%
kable("html", caption = "Estructura de la variable: Carencia de servicios públicos") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))
save_kable(tabla7, "results/tabla7.html")
# 2. Tablas sin y con ponderación
# Sin ponderar
tabla_simple_serv <- cartagena %>%
count(servicios) %>%
mutate(
n_sinpond = as.numeric(n),
porc_sinpond = round(100 * n / sum(n), 1)
) %>%
select(servicios, n_sinpond, porc_sinpond)
# Ponderada (con factor de expansión)
tabla_pond_serv <- cartagena %>%
group_by(servicios) %>%
summarise(n_pond = sum(f_exp_hog, na.rm = TRUE), .groups = "drop") %>%
mutate(porc_pond = round(100 * n_pond / sum(n_pond), 1))
# Unir tablas lado a lado
tabla8 <- tabla_simple_serv %>%
full_join(tabla_pond_serv, by = "servicios") %>%
mutate(
servicios_label = case_when(
servicios == 0 ~ "Sin carencias",
servicios == 1 ~ "1 carencia",
servicios == 2 ~ "2 carencias",
servicios == 3 ~ "3 carencias",
servicios == 4 ~ "4 carencias",
servicios == 5 ~ "5 carencias",
TRUE ~ "No sabe/NA"
)
) %>%
select(servicios_label, n_sinpond, porc_sinpond, n_pond, porc_pond)
# 3. Guardar
tabla8 <- tabla_comp_serv %>%
kable(
"html",
caption = "Distribución de carencias en servicios públicos: comparación ponderada vs sin ponderar",
col.names = c(
"Categoría",
"N (sin ponderar)", "% (sin ponderar)",
"N (ponderado)", "% (ponderado)"
),
digits = 1
) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed")
) %>%
add_header_above(c(" " = 1, "Sin ponderar" = 2, "Ponderado" = 2))
