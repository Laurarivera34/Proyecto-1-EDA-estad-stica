"0: Sin condiciones", "1: Una condición", "2: Dos condiciones",
"3: Tres condiciones", "4: Todas las condiciones"
))
)
grafico_vulniv <- ggplot(tabla_grafico_vulniv, aes(x = nivel_vul, y = porc, fill = tipo)) +
geom_col(position = "dodge", alpha = 0.9) +
geom_text(
aes(label = paste0(porc, "%")),
position = position_dodge(width = 0.9),
vjust = -0.4, size = 3.5
) +
scale_fill_manual(values = c("Sin ponderar" = "#999999", "Ponderado" = "#003366")) +
labs(
title = "Distribución del índice de vulnerabilidad del hogar",
subtitle = "Comparación entre resultados sin ponderar y ponderados",
x = "Nivel de vulnerabilidad (número de condiciones)",
y = "Porcentaje de hogares",
fill = "Tipo de cálculo"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(size = 10, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0)
)
ggsave("results/grafico13.png", plot = grafico_vulniv, width = 10, height = 6, dpi = 300)
# --- 3. Notas de método ---
notas_metodo_vulniv <- "
Notas de método:
- La variable 'vulnerability_score' representa el índice de vulnerabilidad del hogar (0 a 4).
- Cada valor indica el número de condiciones de vulnerabilidad presentes:
(i) jefatura del hogar femenina,
(ii) hogar monoparental,
(iii) presencia de personas con discapacidad,
(iv) antecedentes de violencia.
- Los niveles se interpretan así:
0: sin condiciones; 1: una condición; 2: dos; 3: tres; 4: todas las condiciones.
- Se presentan resultados sin ponderar y ponderados (usando 'f_exp_hog').
- Los porcentajes ponderados reflejan la distribución ajustada a la población.
"
writeLines(notas_metodo_vulniv, "results/notas_metodo_vulnerability_index.txt")
# --- 4. Intervalos de confianza (IC 95%) para el ponderado ---
tabla_ic_vulniv <- tabla_comp_vulniv %>%
mutate(
p = porc_pond / 100,
n = n_pond,
se = sqrt(p * (1 - p) / n),
ic_inf = 100 * (p - 1.96 * se),
ic_sup = 100 * (p + 1.96 * se)
)
grafico_ic_vulniv <- ggplot(tabla_ic_vulniv, aes(
x = factor(nivel_vul, levels = c(
"0: Sin condiciones", "1: Una condición", "2: Dos condiciones",
"3: Tres condiciones", "4: Todas las condiciones"
)),
y = porc_pond
)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_errorbar(aes(ymin = ic_inf, ymax = ic_sup), width = 0.2, color = "black") +
geom_text(aes(label = paste0(round(porc_pond, 1), "%")),
vjust = -0.4, size = 3.5, color = "black") +
labs(
title = "Distribución ponderada del índice de vulnerabilidad del hogar",
subtitle = "Porcentaje ponderado con intervalos de confianza al 95%",
x = "Nivel de vulnerabilidad (número de condiciones)",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text.x = element_text(size = 10, angle = 15, hjust = 1),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0)
)
print(grafico_ic_vulniv)
ggsave("results/grafico14.png", plot = grafico_ic_vulniv, width = 10, height = 6, dpi = 300)
# Definir diseño de encuesta con pesos
design <- svydesign(ids = ~1, weights = ~f_exp_hog, data = cartagena)
# Calcular medias por vulnerabilidad con IC95%
tabla_medias_pond2 <- svyby(~servicios, ~vulnerability_score, design, svymean, vartype = c("ci"))
# Gráfico
grafico_pond2 <- ggplot(tabla_medias_pond2, aes(x = as.factor(vulnerability_score), y = servicios)) +
geom_col(fill = "#003366", alpha = 0.8) +
geom_errorbar(aes(ymin = ci_l, ymax = ci_u), width = 0.2, color = "#e41a1c") +
geom_text(aes(label = round(servicios, 2)), vjust = -0.5, size = 3.5, color = "black") +
labs(
title = "Media de servicios faltantes según vulnerabilidad",
subtitle = "Cartagena de Indias – ponderado con factor de expansión",
x = "Índice de vulnerabilidad (0–4)",
y = "Promedio ponderado de servicios faltantes",
caption = "Nota: Para la construcción del gráfico se usó el factor de expansión para hogares. "
) +
theme_minimal(base_size = 12) +
theme(
plot.caption = element_text(hjust = 0, size = 8, color = "grey45"),
plot.caption.position = "plot"
)
print(grafico_pond2)
# Objeto de diseño de encuesta
design <- svydesign(ids = ~1, weights = ~f_exp_hog, data = cartagena)
# Seleccionando las variables
vars <- c("head_female",
"single_parent_relaxed",
"household_has_disability",
"household_survivor_violence")
# Función: media ponderada de `servicios` por nivel de cada variable (IC95%)
res_list <- map(vars, function(v){
f <- reformulate(v)
out <- svyby(~servicios, f, design,
svymean, vartype = c("ci"), na.rm = TRUE, keep.names = FALSE)
names(out)[names(out) == "servicios"] <- "mean"
out$var   <- v
names(out)[names(out) == v] <- "level"
out
})
res <- bind_rows(res_list) %>%
mutate(
var = case_match(var,
"head_female"               ~ "Jefatura femenina",
"single_parent_relaxed"     ~ "Hogar monoparental",
"household_has_disability"  ~ "Con discapacidad en el hogar",
"household_survivor_violence" ~ "Antecedente de violencia"
),
level = factor(level, levels = c(0,1), labels = c("No","Sí"))
)
# Gráfico
g_comp <- ggplot(res, aes(x = level, y = mean)) +
geom_col(fill = "#003366", alpha = 0.85) +
geom_errorbar(aes(ymin = ci_l, ymax = ci_u), width = 0.15, color = "#e41a1c") +
geom_text(aes(label = round(mean, 2)), vjust = -0.6, size = 3.3) +
facet_wrap(~ var, nrow = 1) +
labs(
title = "Carencias de servicios por componentes de vulnerabilidad",
subtitle = "Cartagena de Indias – promedio ponderado de servicios faltantes (0–5) con IC95%",
x = NULL,
y = "Promedio ponderado de servicios faltantes",
caption = "Ponderado por f_exp_hog. Barras = E[servicios|X], líneas = IC95%."
) +
theme_minimal(base_size = 12) +
theme(
panel.grid = element_blank(),
strip.text = element_text(face = "bold"),
plot.caption = element_text(hjust = 0)
)
print(g_comp)
# Creando una copia del df oringial.
cartagena_tmp <- cartagena %>%
mutate(falta_mas1 = as.integer(servicios >= 2))
# Objeto de diseño de encuesta para usar el factor de expansión
des_tmp <- svydesign(ids = ~1, weights = ~f_exp_hog, data = cartagena_tmp)
# función para dar formato
nice_pct <- function(x) sprintf("%.1f%%", 100*x)
# Función para calcular y graficar
make_prop_plot <- function(var, var_label, file_out, des){
fml <- reformulate(var)
out <- svyby(~falta_mas1, fml, des, svymean,
vartype = c("ci"), na.rm = TRUE, keep.names = FALSE)
names(out)[names(out) == "falta_mas1"] <- "prop"
names(out)[names(out) == var] <- "level"
df <- out %>%
mutate(
level = factor(level, levels = c(0,1), labels = c("No","Sí")),
prop_lab = nice_pct(prop)
)
g <- ggplot(df, aes(x = level, y = prop)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_errorbar(aes(ymin = ci_l, ymax = ci_u),
width = 0.18, color = "#e41a1c") +
geom_text(aes(label = prop_lab), vjust = -0.6, size = 3.5) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(
title = paste0("Hogares con >1 servicio faltante por ", var_label),
subtitle = "Proporción ponderada (IC95%) – Cartagena de Indias",
x = var_label,
y = "Proporción de hogares",
caption = "Ponderado por f_exp_hog. Indicador: servicios ≥ 2."
) +
theme_minimal(base_size = 12) +
theme(
panel.grid = element_blank(),
plot.caption = element_text(hjust = 0)
)
print(g)
}
# Ejecutando la función para cada variable de interés.
make_prop_plot("head_female",
"Jefatura femenina",
"results/figures/prop_mas1_head_female.png",
des_tmp)
make_prop_plot("single_parent_relaxed",
"Hogar monoparental",
"results/figures/prop_mas1_single_parent.png",
des_tmp)
make_prop_plot("household_has_disability",
"Con discapacidad en el hogar",
"results/figures/prop_mas1_disability.png",
des_tmp)
make_prop_plot("household_survivor_violence",
"Antecedente de violencia",
"results/figures/prop_mas1_violence.png",
des_tmp)
# preparación de datos
cartagena_tmp <- cartagena %>%
mutate(falta_mas1 = as.integer(servicios >= 2))
# objeto de Diseño ponderado
des_tmp <- svydesign(ids = ~1, weights = ~f_exp_hog, data = cartagena_tmp)
# Seleccionando Variables binarias a comparar
vars <- c("household_has_disability",
"head_female",
"single_parent_relaxed",
"household_survivor_violence")
# Dejando la categoría de Sí
res_list <- lapply(vars, function(v){
fml <- reformulate(v)  # ~ var
out <- svyby(~falta_mas1, fml, des_tmp, svymean, na.rm = TRUE, keep.names = FALSE)
names(out)[names(out) == "falta_mas1"] <- "prop"
names(out)[names(out) == v] <- "level"
out$var <- v
out
})
res <- bind_rows(res_list) %>%
filter(level == 1) %>%
mutate(
var_label = case_when(
var == "household_has_disability"    ~ "Con discapacidad en el hogar",
var == "head_female"                 ~ "Jefatura femenina",
var == "single_parent_relaxed"       ~ "Hogar monoparental",
var == "household_survivor_violence" ~ "Antecedente de violencia",
TRUE ~ var
)
) %>%
select(var_label, prop)
# Proporción cuando NO hay ninguna condición de vulnerabilidad
prop_none <- as.numeric(
svymean(~falta_mas1,
subset(des_tmp,
household_has_disability == 0 &
head_female == 0 &
single_parent_relaxed == 0 &
household_survivor_violence == 0),
na.rm = TRUE)
)
ref_row <- tibble(
var_label = "Ninguna condición de vulnerabilidad",
prop = prop_none
)
# Reajustando el df para el gráfico
res2 <- bind_rows(res, ref_row) %>%
mutate(
prop_lab = paste0(round(100 * prop, 1), "%")
) %>%
arrange(desc(prop)) %>%
mutate(var_label = factor(var_label, levels = rev(var_label)))  # orden descendente
# Haciendo el gráfico
g_all <- ggplot(res2, aes(y = var_label, x = prop)) +
geom_col(fill = "#003366", alpha = 0.9, width = 0.7) +
geom_text(aes(label = prop_lab), hjust = -0.15, size = 3.8, color = "black") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1),
limits = c(0, max(res2$prop) * 1.08)) +
labs(
title = "Hogares migrantes venezolanos con carencia en alguno de los servicios básicos en Cartagena",
subtitle = "Comparación por condición específica de vulnerabilidad",
y = NULL,
caption = "Nota: Para la construcción del gráfico se usó el factor de expansión para hogares"
) +
theme_minimal(base_size = 12) +
theme(
plot.caption = element_text(hjust = 0, size = 8, color = "grey45"),
plot.caption.position = "plot"
)
print(g_all)
# Preparando los datos
cartagena_tmp <- cartagena %>%
mutate(
falta_mas1 = as.integer(servicios >= 2),
vuln = suppressWarnings(as.numeric(as.character(vulnerability_score)))
)
# Diseño ponderado
des_tmp <- svydesign(ids = ~1, weights = ~f_exp_hog, data = cartagena_tmp)
# Proporción ponderada por índice de vulnerabilidad
out <- svyby(~falta_mas1, ~vuln, des_tmp, svymean, na.rm = TRUE, keep.names = FALSE)
# Preparando los datos
df_vul <- out %>%
rename(prop = falta_mas1, score = vuln) %>%
filter(!is.na(score), score %in% 0:4) %>%
arrange(score) %>%
mutate(
score_f = factor(score, levels = 0:4, labels = c("0","1","2","3","4")),
prop_lab = paste0(round(100*prop, 1), "%")
)
# Creando el gráfico
g_vul <- ggplot(df_vul, aes(x = score_f, y = prop)) +
geom_col(fill = "#003366", alpha = 0.9, width = 0.6) +
geom_text(aes(label = prop_lab), vjust = -0.6, size = 3.8, color = "black") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1),
limits = c(0, max(df_vul$prop) * 1.15)) +
labs(
title = "Hogares migrantes venezolanos con ≥2 servicios faltantes según índice de vulnerabilidad en Cartagena",
x = "Índice de vulnerabilidad (0–4)",
y = "Proporción de hogares",
caption = "Ponderado por f_exp_hog. Indicador: servicios faltantes ≥ 2."
) +
theme_minimal(base_size = 12) +
theme(
plot.caption = element_text(hjust = 0, size = 8, color = "grey45"),
plot.caption.position = "plot"
)
print(g_vul)
df <- res2 %>%
mutate(var_label = factor(var_label, levels = rev(var_label)))
ggplot(df, aes(x = prop, y = var_label)) +
geom_point(size = 3) +
geom_errorbarh(aes(xmin = prop - 1.96*sqrt(prop*(1-prop)/1000),
xmax = prop + 1.96*sqrt(prop*(1-prop)/1000)), height = 0) +
scale_x_continuous(labels = scales::percent) +
labs(title = "Proporción con ≥2 carencias por condición",
x = "Proporción ponderada", y = NULL,
caption = "Cleveland dot-plot: prioriza posición sobre área.") +
theme_minimal()
# Preparación de datos
df_plot <- cartagena %>%
mutate(
servicios = as.integer(servicios),
vuln = as.integer(as.character(vulnerability_score))
)
# Creando el objeto de Diseño Muestral Ponderado
des <- svydesign(ids = ~1, weights = ~f_exp_hog, data = df_plot)
# Tabla de Proporciones Ponderadas
tab_w <- as.data.frame(svytable(~ servicios + vuln, design = des)) %>%
as_tibble() %>%
rename(nw = Freq) %>%
group_by(vuln) %>%
mutate(prop = nw / sum(nw)) %>%
ungroup() %>%
mutate(
servicios = factor(servicios, levels = 4:0, labels = c("4", "3", "2", "1", "0")),
vuln      = factor(vuln, levels = 0:4, labels = c("0", "1", "2", "3", "4")),
prop_lab  = paste0(round(100 * prop, 1), "%")
)
#Haciendo el gráfico
g_stack_final_simple <- ggplot(tab_w, aes(x = vuln, y = prop, fill = servicios)) +
geom_hline(yintercept = 0, color = "gray70", linetype = "solid") +
geom_col(width = 0.8) +
geom_text(
data = ~ filter(.x, prop >= 0.05),
aes(
label = prop_lab,
color = ifelse(servicios == "4", "especial", "normal")
),
position = position_stack(vjust = 0.5),
size = 3.5,
fontface = "bold",
show.legend = FALSE
) +
scale_y_continuous(
labels = percent_format(accuracy = 1),
expand = expansion(mult = c(0, 0.05))
) +
scale_fill_brewer(
palette = "Blues",
direction = -1,
name = "Número de Carencias:"
) +
scale_color_manual(
values = c("normal" = "gray20", "especial" = "white")
) +
labs(
title = "Distribución porcentual de hogares según la vulnerabilidad\ny el número de carencias en servicios básicos",
x = "Índice de Vulnerabilidad del hogar",
y = "Proporción de hogares",
caption = "Nota: Proporciones ponderadas con el factor de expansión del hogar (f_exp_hog).\nEl índice de vulnerabilidad va de 0 (sin condiciones) a 3 (tres condiciones de vulnerabilidad)."
) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = rel(1.2)),
plot.caption = element_text(hjust = 0, color = "gray40"),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10))
)
print(g_stack_final_simple)
# exportando el gráfico
ggsave(
filename = "results/grafico15.png",
plot = g_stack_final_simple,
width = 10,
height = 7,
dpi = 300,
bg = "white"
)
# --------------------------------
# AJUSTANDO LOS DATOS PARA HACER LA GRÁFICA QUE QUEREMOS
# Definimos las variables de vulnerabilidad que vamos a analizar.
vars_vulnerabilidad <- c(
"head_female",
"single_parent_relaxed",
"household_has_disability",
"household_survivor_violence"
)
# Creamos el data.frame largo, ideal para ggplot2.
df_largo <- cartagena %>%
# Nos aseguramos de que las variables de vulnerabilidad sean numéricas (0 o 1)
mutate(across(all_of(vars_vulnerabilidad), as.integer)) %>%
# Creamos la categoría "Sin Vulnerabilidad".
# Será 1 si la suma de todas las vulnerabilidades es 0.
mutate(
sin_vulnerabilidad = if_else(rowSums(select(., all_of(vars_vulnerabilidad))) == 0, 1, 0)
) %>%
# Pivotamos los datos de formato ancho a largo.
# Cada hogar tendrá ahora múltiples filas, una por cada condición de vulnerabilidad.
tidyr::pivot_longer(
cols = c(all_of(vars_vulnerabilidad), "sin_vulnerabilidad"),
names_to = "grupo_vulnerabilidad",
values_to = "presente"
) %>%
# Filtramos para quedarnos solo con las condiciones que el hogar SÍ presenta.
# Esto evita duplicar hogares en el conteo.
filter(presente == 1) %>%
# Limpiamos y ordenamos las etiquetas para el gráfico.
mutate(
grupo_vulnerabilidad = fct_recode(
grupo_vulnerabilidad,
"Sin Vulnerabilidad" = "sin_vulnerabilidad",
"Jefatura Femenina" = "head_female",
"Monoparental" = "single_parent_relaxed",
"Con Discapacidad" = "household_has_disability",
"Víctima de Violencia" = "household_survivor_violence"
),
# Reordenamos los niveles para que "Sin Vulnerabilidad" aparezca primero.
grupo_vulnerabilidad = fct_relevel(
grupo_vulnerabilidad,
"Sin Vulnerabilidad", "Jefatura Femenina", "Monoparental", "Con Discapacidad", "Víctima de Violencia"
)
)
# --------------------------------
# PREPARANDO EL DF PARA EL GRÁFICO
# Creamos el objeto de diseño muestral con los datos ya transformados.
des_largo <- svydesign(ids = ~1, weights = ~f_exp_hog, data = df_largo)
# Calculamos la tabla de proporciones ponderadas.
datos_grafico <- as.data.frame(svytable(~ servicios + grupo_vulnerabilidad, design = des_largo)) %>%
as_tibble() %>%
rename(conteo_pond = Freq) %>%
group_by(grupo_vulnerabilidad) %>%
mutate(proporcion = conteo_pond / sum(conteo_pond)) %>%
ungroup() %>%
mutate(
# Ordenamos 'servicios' para el apilamiento (4 carencias arriba)
servicios = factor(servicios, levels = 4:0),
# Creamos la etiqueta de texto
etiqueta_prop = paste0(round(100 * proporcion, 1), "%")
)
# --------------------------------
# HACIENDO EL GRÁFICO
g_stack_final <- ggplot(datos_grafico, aes(x = grupo_vulnerabilidad, y = proporcion, fill = servicios)) +
geom_hline(yintercept = 0, color = "gray70", linetype = "solid") +
geom_col(width = 0.7) +
geom_text(
data = ~ filter(.x, proporcion >= 0.02),
aes(
label = etiqueta_prop,
color = ifelse(servicios == "4", "especial", "normal")
),
position = position_stack(vjust = 0.5),
size = 3.5,
fontface = "bold",
show.legend = FALSE
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
expand = expansion(mult = c(0, 0.05))
) +
scale_fill_brewer(
palette = "Blues",
direction = -1,
name = "Número de Carencias:"
) +
scale_color_manual(values = c("normal" = "gray20", "especial" = "white")) +
labs(
title = "Distribución de carencias en servicios por condición de vulnerabilidad del hogar",
x = "Condición de vulnerabilidad",
y = "Proporción de hogares",
caption = "Nota: Proporciones ponderadas con el factor de expansión del hogar (f_exp_hog)."
) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = rel(1.2)),
plot.caption = element_text(hjust = 0, color = "gray40"),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text.x = element_text(angle = 15, hjust = 1)
)
print(g_stack_final)
# --------------------------------
# EXPORTANDO EL GRÁFICO
ggsave(
filename = "results/grafico16.png",
plot = g_stack_final,
width = 11,
height = 8,
dpi = 300,
bg = "white"
)
