ggsave("results/grafico9.png", plot = grafico_single, width = 10, height = 6, dpi = 300)
# 3. Notas de método
notas_metodo_single <- "
Notas de método:
- La variable 'single_parent_relaxed' identifica si el hogar es monoparental bajo una definición relajada (1 = sí, 0 = no).
- La tabla compara los conteos (N) y proporciones (%) sin ponderar y ponderados por el factor de expansión (f_exp_hog).
- Los valores ponderados reflejan la distribución ajustada a la población.
- No se identificaron valores perdidos o inconsistentes en la variable.
"
writeLines(notas_metodo_single, "results/notas_metodo_single_parent_relaxed.txt")
# 4. Calcular barras de error (IC 95%)
tabla_grafico_ic_single <- tabla_comp_single %>%
mutate(
p = porc_pond / 100,
n = n_pond,
se = sqrt(p * (1 - p) / n),
ic_inf = 100 * (p - 1.96 * se),
ic_sup = 100 * (p + 1.96 * se)
)
# 4.1 Gráfico con barras de error
grafico_single_ic <- ggplot(tabla_grafico_ic_single, aes(
x = factor(single_parent_relaxed, labels = c("No monoparental", "Monoparental")),
y = porc_pond
)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_errorbar(aes(ymin = ic_inf, ymax = ic_sup), width = 0.2, color = "black") +
geom_text(aes(label = paste0(round(porc_pond, 1), "%")),
vjust = -0.4, size = 3.5, color = "black") +
labs(
title = "Hogar monoparental (definición relajada)",
subtitle = "Porcentaje ponderado con intervalos de confianza al 95%",
x = "Condición del hogar",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0)
)
print(grafico_single_ic)
# 1. Tabla resumen
resumen_disability <- data.frame(
Estadístico = c("N", "NAs", "Valores únicos", "Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
valor = c(
sum(!is.na(cartagena$household_has_disability)),
sum(is.na(cartagena$household_has_disability)),
length(unique(cartagena$household_has_disability)),
min(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.25, na.rm = TRUE),
median(cartagena$household_has_disability, na.rm = TRUE),
mean(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.75, na.rm = TRUE),
max(cartagena$household_has_disability, na.rm = TRUE)
)
)
# --------------------------------
# AJUSTANDO LOS DATOS PARA HACER LA GRÁFICA QUE QUEREMOS
# Definimos las variables de vulnerabilidad que vamos a analizar.
vars_vulnerabilidad <- c(
"head_female",
"single_parent_relaxed",
"household_survivor_violence"
)
# Creamos el data.frame largo, ideal para ggplot2.
df_largo <- cartagena %>%
# Nos aseguramos de que las variables de vulnerabilidad sean numéricas (0 o 1)
mutate(across(all_of(vars_vulnerabilidad), as.integer)) %>%
# Creamos la categoría "Sin Vulnerabilidad".
# Será 1 si la suma de todas las vulnerabilidades es 0.
mutate(
sin_vulnerabilidad = if_else(rowSums(select(., all_of(vars_vulnerabilidad))) == 0, 1, 0)
) %>%
# Pivotamos los datos de formato ancho a largo.
# Cada hogar tendrá ahora múltiples filas, una por cada condición de vulnerabilidad.
tidyr::pivot_longer(
cols = c(all_of(vars_vulnerabilidad), "sin_vulnerabilidad"),
names_to = "grupo_vulnerabilidad",
values_to = "presente"
) %>%
# Filtramos para quedarnos solo con las condiciones que el hogar SÍ presenta.
# Esto evita duplicar hogares en el conteo.
filter(presente == 1) %>%
# Limpiamos y ordenamos las etiquetas para el gráfico.
mutate(
grupo_vulnerabilidad = fct_recode(
grupo_vulnerabilidad,
"Sin Vulnerabilidad" = "sin_vulnerabilidad",
"Jefatura Femenina" = "head_female",
"Monoparental" = "single_parent_relaxed",
"Víctima de Violencia" = "household_survivor_violence"
),
# Reordenamos los niveles para que "Sin Vulnerabilidad" aparezca primero.
grupo_vulnerabilidad = fct_relevel(
grupo_vulnerabilidad,
"Sin Vulnerabilidad", "Jefatura Femenina", "Monoparental", "Víctima de Violencia"
)
)
# --------------------------------
# PREPARANDO EL DF PARA EL GRÁFICO
# Creamos el objeto de diseño muestral con los datos ya transformados.
des_largo <- svydesign(ids = ~1, weights = ~f_exp_hog, data = df_largo)
# Calculamos la tabla de proporciones ponderadas.
datos_grafico <- as.data.frame(svytable(~ servicios + grupo_vulnerabilidad, design = des_largo)) %>%
as_tibble() %>%
rename(conteo_pond = Freq) %>%
group_by(grupo_vulnerabilidad) %>%
mutate(proporcion = conteo_pond / sum(conteo_pond)) %>%
ungroup() %>%
mutate(
# Ordenamos 'servicios' para el apilamiento (4 carencias arriba)
servicios = factor(servicios, levels = 4:0),
# Creamos la etiqueta de texto
etiqueta_prop = paste0(round(100 * proporcion, 1), "%")
)
# --------------------------------
# HACIENDO EL GRÁFICO
g_stack_final <- ggplot(datos_grafico, aes(x = grupo_vulnerabilidad, y = proporcion, fill = servicios)) +
geom_hline(yintercept = 0, color = "gray70", linetype = "solid") +
geom_col(width = 0.7) +
geom_text(
data = ~ filter(.x, proporcion >= 0.02),
aes(
label = etiqueta_prop,
color = ifelse(servicios == "4", "especial", "normal")
),
position = position_stack(vjust = 0.5),
size = 3.5,
fontface = "bold",
show.legend = FALSE
) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
expand = expansion(mult = c(0, 0.05))
) +
scale_fill_brewer(
palette = "Blues",
direction = -1,
name = "Número de Carencias:"
) +
scale_color_manual(values = c("normal" = "gray20", "especial" = "white")) +
labs(
title = "Distribución de carencias en servicios por condición de vulnerabilidad del hogar",
x = "Condición de vulnerabilidad",
y = "Proporción de hogares",
caption = "Nota: Proporciones ponderadas con el factor de expansión del hogar (f_exp_hog)."
) +
theme_minimal(base_size = 14) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "top",
plot.title = element_text(hjust = 0.5, face = "bold", size = rel(1.2)),
plot.caption = element_text(hjust = 0, color = "gray40"),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text.x = element_text(angle = 15, hjust = 1)
)
print(g_stack_final)
# --------------------------------
# EXPORTANDO EL GRÁFICO
ggsave(
filename = "results/grafico16.png",
plot = g_stack_final,
width = 11,
height = 8,
dpi = 300,
bg = "white"
)
# 1. Tabla resumen
resumen_disability <- data.frame(
Estadístico = c("N", "NAs", "Valores únicos", "Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
valor = c(
sum(!is.na(cartagena$household_has_disability)),
sum(is.na(cartagena$household_has_disability)),
length(unique(cartagena$household_has_disability)),
min(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.25, na.rm = TRUE),
median(cartagena$household_has_disability, na.rm = TRUE),
mean(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.75, na.rm = TRUE),
max(cartagena$household_has_disability, na.rm = TRUE)
)
)
# 1) Construcción del score de vulnerabilidad (sin variable de discapacidad)
hogares_vulnerabilidad <- hogares_out %>%
select(id_hogar, mpio, head_female, f_exp_hog) %>%
left_join(hog_single %>% select(id_hogar, single_parent_relaxed), by = "id_hogar") %>%
left_join(hogares_violencia_amenazas %>% select(id_hogar, household_survivor_violence), by = "id_hogar") %>%
mutate(
head_female               = coalesce(as.integer(head_female), 0L),
single_parent_relaxed     = coalesce(as.integer(single_parent_relaxed), 0L),
household_survivor_violence = coalesce(as.integer(household_survivor_violence), 0L),
vulnerability_score = head_female +
single_parent_relaxed +
household_survivor_violence
)
# 2a) Tabla “larga”: conteos y porcentajes por score y región
resumen_score <- bind_rows(
hogares_vulnerabilidad %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
count(region, vulnerability_score, name = "n") %>%
group_by(region) %>%
mutate(pct = round(100 * n / sum(n), 2)) %>%
ungroup(),
hogares_vulnerabilidad %>%
count(vulnerability_score, name = "n") %>%
mutate(region = "Total país") %>%
group_by(region) %>%
mutate(pct = round(100 * n / sum(n), 2)) %>%
ungroup()
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")),
vulnerability_score)
# Tabla larga HTML
tabla5 <- resumen_score %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por score y región (tabla larga)",
digits = 2,
col.names = c("Región", "Score de vulnerabilidad", "N", "%")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla larga
save_kable(tabla5, "results/tabla5.html")
# 2b) Tabla “ancha”: porcentajes por columnas
tabla_score_pct <- resumen_score %>%
select(region, vulnerability_score, pct) %>%
pivot_wider(names_from = vulnerability_score, values_from = pct, values_fill = 0) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# Tabla ancha HTML
tabla6 <- tabla_score_pct %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por región (tabla ancha, %)",
digits = 2
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla ancha
save_kable(tabla6, "results/tabla6.html")
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE DEPENDIENTE
cartagena_dep <- cartagena_pre %>%
dplyr::select(id_hogar,
servicios,
alojamiento4_alojamiento4_energia,
alojamiento4_alojamiento4_gas,
alojamiento4_alojamiento4_alcantarillado,
alojamiento4_alojamiento4_acueducto,
alojamiento4_alojamiento4_recoleccion)
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE INDEPENDIENTE
cartagena_ind <- hogares_vulnerabilidad %>%
filter(mpio=="Cartagena De Indias") %>%
dplyr::select(id_hogar,
head_female,
single_parent_relaxed,
household_has_disability,
household_survivor_violence,
vulnerability_score,
f_exp_hog)
# 1) Construcción del score de vulnerabilidad
hogares_vulnerabilidad <- hogares_out %>%
select(id_hogar, mpio, head_female, f_exp_hog) %>%
left_join(hog_single %>% select(id_hogar, single_parent_relaxed), by = "id_hogar") %>%
left_join(hogares_disability %>% select(id_hogar, household_has_disability), by = "id_hogar") %>%
left_join(hogares_violencia_amenazas %>% select(id_hogar, household_survivor_violence), by = "id_hogar") %>%
mutate(
head_female                  = coalesce(as.integer(head_female), 0L),
single_parent_relaxed        = coalesce(as.integer(single_parent_relaxed), 0L),
household_has_disability     = coalesce(as.integer(household_has_disability), 0L),
household_survivor_violence = coalesce(as.integer(household_survivor_violence), 0L),
vulnerability_score = head_female +
single_parent_relaxed +
household_has_disability +
household_survivor_violence
)
# 2a) Tabla “larga”: conteos y porcentajes por score y región
resumen_score <- bind_rows(
hogares_vulnerabilidad %>%
mutate(region = if_else(mpio == "Cartagena De Indias", "Cartagena", "Resto país")) %>%
count(region, vulnerability_score, name = "n") %>%
group_by(region) %>% mutate(pct = round(100 * n / sum(n), 2)) %>% ungroup(),
hogares_vulnerabilidad %>%
count(vulnerability_score, name = "n") %>%
mutate(region = "Total país") %>%
group_by(region) %>% mutate(pct = round(100 * n / sum(n), 2)) %>% ungroup()
) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")),
vulnerability_score)
# Tabla larga HTML
tabla5 <- resumen_score %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por score y región (tabla larga)",
digits = 2,
col.names = c("Región", "Score de vulnerabilidad", "N", "%")
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla larga
save_kable(tabla5, "results/tabla5.html")
# 2b) Tabla “ancha”: porcentajes por columnas 0–4
tabla_score_pct <- resumen_score %>%
select(region, vulnerability_score, pct) %>%
pivot_wider(names_from = vulnerability_score, values_from = pct, values_fill = 0) %>%
arrange(factor(region, levels = c("Cartagena", "Resto país", "Total país")))
# Tabla ancha HTML
tabla6 <- tabla_score_pct %>%
kable(
format = "html",
caption = "Distribución del índice de vulnerabilidad por región (tabla ancha, %)",
digits = 2
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2C3E50")
# Guardar tabla ancha
save_kable(tabla6, "results/tabla6.html")
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE DEPENDIENTE
cartagena_dep <- cartagena_pre %>%
dplyr::select(id_hogar,
servicios,
alojamiento4_alojamiento4_energia,
alojamiento4_alojamiento4_gas,
alojamiento4_alojamiento4_alcantarillado,
alojamiento4_alojamiento4_acueducto,
alojamiento4_alojamiento4_recoleccion)
# copiando el DF de variables definitivas por hogar pero solo para Cartagena - VARIABLE INDEPENDIENTE
cartagena_ind <- hogares_vulnerabilidad %>%
filter(mpio=="Cartagena De Indias") %>%
dplyr::select(id_hogar,
head_female,
single_parent_relaxed,
household_has_disability,
household_survivor_violence,
vulnerability_score,
f_exp_hog)
# OTRAS VARIABLES
# se deja abierta por si es requerido
# Uniendo las bases de datos
cartagena <- left_join(cartagena_dep, cartagena_ind, by = "id_hogar")
# 1. Tabla resumen
resumen_servicios <- data.frame(
Estadístico = c("N", "NAs", "Valores únicos", "Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
valor = c(
sum(!is.na(cartagena$servicios)),
sum(is.na(cartagena$servicios)),
length(unique(cartagena$servicios)),
min(cartagena$servicios, na.rm = TRUE),
quantile(cartagena$servicios, 0.25, na.rm = TRUE),
median(cartagena$servicios, na.rm = TRUE),
mean(cartagena$servicios, na.rm = TRUE),
quantile(cartagena$servicios, 0.75, na.rm = TRUE),
max(cartagena$servicios, na.rm = TRUE)
)
)
# 1.2 Generar tabla
tabla_resumen <- resumen_servicios %>%
kable(
"html",
caption = "<b style='color:#003366; font-size:16px;'>Variable dependiente: Servicios</b>"
) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#003366")  # <-- Encabezado azul oscuro
# 1.3 Guardar tabla
save_kable(tabla_resumen, "results/tabla7.html")
# 2. Tabla de distribución
tabla_resumen <- cartagena %>%
count(servicios) %>%
mutate(
porc = round(100 * n / sum(n), 1),
servicios_label = case_when(
servicios == 0 ~ "Sin carencias",
servicios == 1 ~ "1 carencia",
servicios == 2 ~ "2 carencias",
servicios == 3 ~ "3 carencias",
servicios == 4 ~ "4 carencias",
TRUE ~ "No sabe/NA"
)
)
# 2.1 Gráfico
grafico_servicios <- ggplot(tabla_resumen, aes(x = servicios_label, y = porc)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_text(aes(label = paste0(porc, "%")), vjust = -0.3, size = 4, color = "black") +
labs(
title = "Carencia de acceso a servicios públicos",
subtitle = "Distribución de hogares según número de carencias",
x = "Número de carencias reportadas",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# 2.2 Mostrar y guardar
print(grafico_servicios)
ggsave("results/grafico4.png",
plot = grafico_servicios, width = 10, height = 6, dpi = 300)
# 3. Notas de método
notas_metodo <- "
Notas de método:
- Se estandarizaron las etiquetas y las categorías con valores entre 0 y 5.
- No se encontraron valores fuera del rango 0–5.
- Las barras de error no se aplican porque la variable es discreta.
- Los valores NA se reportan explícitamente y no fueron imputados.
- Las categorías con frecuencia menor al 3% se mantuvieron dado su significado sustantivo.
"
writeLines(notas_metodo, "results/notas_metodo_servicios.txt")
# 1. Tabla resumen
resumen_disability <- data.frame(
Estadístico = c("N", "NAs", "Valores únicos", "Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max."),
valor = c(
sum(!is.na(cartagena$household_has_disability)),
sum(is.na(cartagena$household_has_disability)),
length(unique(cartagena$household_has_disability)),
min(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.25, na.rm = TRUE),
median(cartagena$household_has_disability, na.rm = TRUE),
mean(cartagena$household_has_disability, na.rm = TRUE),
quantile(cartagena$household_has_disability, 0.75, na.rm = TRUE),
max(cartagena$household_has_disability, na.rm = TRUE)
)
)
# 1.2 Generar tabla
tabla_resumen_disability <- resumen_disability %>%
kable(
"html",
caption = "<b style='color:#003366; font-size:16px;'>Variable: Hogar con personas con discapacidad</b>"
) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center"
) %>%
row_spec(0, bold = TRUE, color = "white", background = "#003366")  # Encabezado azul oscuro
# 1.3 Guardar tabla
save_kable(tabla_resumen_disability, "results/tabla14.html")
# 2. Tabla de distribución
tabla_resumen_disability <- cartagena %>%
count(household_has_disability) %>%
mutate(
porc = round(100 * n / sum(n), 1),
disability_label = case_when(
household_has_disability == 0 ~ "Sin personas con discapacidad",
household_has_disability == 1 ~ "Con personas con discapacidad",
TRUE ~ "No sabe/NA"
)
)
# 2.1 Gráfico
grafico_disability <- ggplot(tabla_resumen_disability, aes(x = disability_label, y = porc)) +
geom_col(fill = "#003366", alpha = 0.9) +
geom_text(aes(label = paste0(porc, "%")), vjust = -0.3, size = 4, color = "black") +
labs(
title = "Hogares con personas con discapacidad",
subtitle = "Distribución de hogares según presencia de miembros con discapacidad",
x = "Condición del hogar",
y = "Porcentaje de hogares"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 11, margin = margin(t = 10)),
axis.title.y = element_text(size = 11, margin = margin(r = 10)),
plot.title = element_text(face = "bold", size = 16, hjust = 0),
plot.subtitle = element_text(size = 12, hjust = 0),
plot.margin = unit(c(1, 1, 1, 1), "cm")
)
# 2.2 Mostrar y guardar
print(grafico_disability)
ggsave("results/grafico9.png",
plot = grafico_disability, width = 10, height = 6, dpi = 300)
# 3. Notas de método
notas_metodo_disability <- "
Notas de método:
- La variable 'household_has_disability' identifica si el hogar cuenta con al menos una persona con discapacidad (1 = sí, 0 = no).
- Se confirmó que la variable tiene codificación binaria (0 y 1).
- Los valores NA se reportan explícitamente y no fueron imputados.
- No se aplican barras de error porque la variable es discreta y categórica.
- La mayoría de hogares no presentan personas con discapacidad, lo cual explica la asimetría en la distribución.
"
writeLines(notas_metodo_disability, "results/notas_metodo_disability.txt")
View(hogares_vulnerabilidad)
